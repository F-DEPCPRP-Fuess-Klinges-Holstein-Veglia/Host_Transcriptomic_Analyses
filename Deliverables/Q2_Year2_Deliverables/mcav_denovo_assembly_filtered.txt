#####################################################~~~~~~~~~ On DRTO MCAV ~~~~~~~~~#########################################################

## Using updated filtering technique with kraken & bbsplit on files before assembly in trinity, then protein blast at the end

# copied fwd & reverse files for the five samples into filtering_txome_assembly in trinity_out_dir_mcav

vi kraken.sh
i
#!/bin/bash
#SBATCH --job-name=kraken_mcav
#SBATCH -N 1
#SBATCH -t 1-24:00
#SBATCH --partition=shared
#SBATCH --mem=50G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH --open-mode=append
#SBATCH -o kraken_%j.out
#SBATCH -e kraken_%j.err

#for loop to run kraken filtering on all pairs in the folder
# this code assumes you are already in the directory that contains the reads
for infile in *R1_cln.fastq
	do
	echo "working with sample $infile"
	base=$(basename ${infile} _R1_cln.fastq)
	infile2=${base}_R2_cln.fastq
	echo "Now running kraken"
	/home/vwk8/miniconda3/envs/RNAseq/bin/kraken2-2.0.8-beta/kraken2 --db /home/vwk8/miniconda3/envs/RNAseq/bin/krakenDB_gen ${base}_R1_cln.fastq ${base}_R2_cln.fastq --threads 16 --paired --classified-out ${base}_contam#.fastq --unclassified-out ${base}_unclass#.fastq --report ${base}_krakenDB.report --output ${base}_krakenDB.out
	done
	echo "Dunzo"

vi bbsplit.sh
i
#!/bin/bash
#SBATCH --job-name=bbsplit_mcav
#SBATCH -N 1
#SBATCH -t 1-24:00
#SBATCH --partition=shared
#SBATCH --mem=100G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o bbsplit_%j.out
#SBATCH -e bbsplit_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/
DIR=/home/vwk8/transcriptomes/symbiont
for FILE in *_unclass_1.fastq; do
        echo ${FILE}
        SAMP=$(basename -s _unclass_1.fastq $FILE)
        echo $SAMP

/home/vwk8/miniconda3/envs/RNAseq/bin/bbsplit.sh in1=${SAMP}_unclass_1.fastq in2=${SAMP}_unclass_2.fastq ref=${DIR}/Smic_Aranda2016/Smic.transcriptomeRef.cov5.fa,${DIR}/SymA_Y106_Shoguchi2018.fasta,${DIR}/Baenigmaticum_Parkinson2016/aenig_assembly_longest_250.fa,${DIR}/Bminutum_Parkinson2016/min_assembly_longest_250.fa,${DIR}/Bpseudominutum_Parkinson2016/pmin_assembly_longest_250.fa,${DIR}/Bpsygmophilum_Parkinson2016/psyg_assembly_longest_250.fa,${DIR}/Cgoreaui_Davies2016/davies_cladeC_feb.fasta,${DIR}/Clado_spp_Y103_Shoguchi2018.fasta,${DIR}/Dtrenchii_Bellantuono2019/Dtrenchii_rnaseq_assembly_v1.0.fasta basename=${SAMP}_%.fasta refstats=${SAMP}_stats.txt outu1=${SAMP}_bboutu_R1.fasta outu2=${SAMP}_bboutu_R2.fasta
done

# example from one sample
#name				%unambiguousReads	unambiguousMB	%ambiguousReads	ambiguousMB	unambiguousReads ambiguousReads	assignedReads	assignedBases
davies_cladeC_feb		9.25778	1418.646407	0.46123	69.998470	9554722	476020	9555738	1418795883
Clado_spp_Y103_Shoguchi2018	4.73111	722.406084	1.26372	193.845234	4882856	1304258	6091178	901951493
SymA_Y106_Shoguchi2018		0.43445	64.710664	0.71907	110.812671	448388	742132	449282	64836999
Dtrenchii_rnaseq_assembly_v1.0	0.05082	6.789886	0.02853	4.194493	52446	29448	76636	10251607
pmin_assembly_longest_250	0.01392	2.038760	0.10294	15.620822	14366	106240	14366	2038760
psyg_assembly_longest_250	0.01311	1.869803	0.09177	13.955898	13526	94718	40386	5827606
aenig_assembly_longest_250	0.00793	1.089084	0.09989	15.125948	8184	103090	10260	1375423
Smic.transcriptomeRef.cov5	0.00664	0.822194	0.00748	1.068336	6854	7718	13890	1793131
min_assembly_longest_250	0.00595	0.851261	0.11211	17.005661	6138	115710	121080	17750568

### now assemble in Trinity

vi trinity_mcav.sh
i
#!/bin/bash
#SBATCH --job-name=Trin_mcav
#SBATCH -N 1
#SBATCH -t 14-24:00
#SBATCH --partition=himem
#SBATCH --mem=400G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o trinity_%j.out
#SBATCH -e trinity_%j.err

Trinity --normalize_reads --seqType fa --grid_node_CPU 21 --grid_node_max_memory 400G --max_memory 400G --SS_lib_type FR --left DT25_MCAV_1H_Sept_2021_S225_bboutu_R1.fasta,DT26_MCAV_1H_August_2022_S274_bboutu_R1.fasta,DT26_MCAV_2D_June_2022_S332_bboutu_R1.fasta,DT28_MCAV_1D_Febr_2022_S307_bboutu_R1.fasta,DT28_MCAV_3H_Febr_2022_S300_bboutu_R1.fasta --right DT25_MCAV_1H_Sept_2021_S225_bboutu_R2.fasta,DT26_MCAV_1H_August_2022_S274_bboutu_R2.fasta,DT26_MCAV_2D_June_2022_S332_bboutu_R2.fasta,DT28_MCAV_1D_Febr_2022_S307_bboutu_R2.fasta,DT28_MCAV_3H_Febr_2022_S300_bboutu_R2.fasta --CPU 25 --output trinity_out_dir

# N50

################################
## Counts of transcripts, etc.
################################
Total trinity 'genes':  497004
Total trinity transcripts:      851449
Percent GC: 41.21
########################################
Stats based on ALL transcript contigs:
########################################
        Contig N10: 3319
        Contig N20: 2131
        Contig N30: 1414
        Contig N40: 955
        Contig N50: 677
        Median contig length: 320
        Average contig: 538.27
        Total assembled bases: 458305767
#####################################################
## Stats based on ONLY LONGEST ISOFORM per 'GENE':
#####################################################
        Contig N10: 2814
        Contig N20: 1504
        Contig N30: 856
        Contig N40: 575
        Contig N50: 429
        Median contig length: 278
        Average contig: 426.24
        Total assembled bases: 211843590

## Busco stats, from metazoan db ###

	C:95.4%[S:27.1%,D:68.3%],F:2.7%,M:1.9%,n:954	   
	911	Complete BUSCOs (C)			   
	259	Complete and single-copy BUSCOs (S)	   
	652	Complete and duplicated BUSCOs (D)	   
	26	Fragmented BUSCOs (F)			   
	17	Missing BUSCOs (M)			   
	954	Total BUSCO groups searched

##now trying and running through remaining txome assembly steps (minus master coral database)

#select longest isoform
/home/vwk8/miniconda3/envs/RNAseq/opt/trinity-2.9.1/util/misc/get_longest_isoform_seq_per_trinity_gene.pl Trinity.fasta > processed_transcriptome_mcav.fa

#An index of the metatranscriptome assembly is created with [cdbfasta]
/home/vwk8/miniconda3/envs/RNAseq/bin/cdbfasta-master/cdbfasta Trinity.fasta

#Extract the longest open reading frame from each contig and then generate its predicted peptide sequence using [TransDecoder]
###this should remove rRNAs and tRNAs, as they are not coding typically
## and is identifying isoforms
/home/vwk8/miniconda3/envs/RNAseq/bin/TransDecoder-TransDecoder-v5.7.1/TransDecoder.LongOrfs -t processed_transcriptome_mcav.fa
/home/vwk8/miniconda3/envs/RNAseq/bin/TransDecoder-TransDecoder-v5.7.1/TransDecoder.Predict -t processed_transcriptome_mcav.fa
# Rename the resulting .pep file to end in .fa
mv processed_transcriptome_mcav.fa.transdecoder.pep processed_transcriptome_mcav.transdecoder.fa

#similar sequences are removed with cdhit
/home/vwk8/miniconda3/envs/RNAseq/bin/cdhit-master/cd-hit -i processed_transcriptome_mcav.transdecoder.fa -o reference_proteome.fa
# This reference proteome is now ready for Orthofinder

#~~~~~ Step 4: Make an alignable transcriptome~~~~~~~~~~~~
#Use the reference proteome to create an alignable transcriptome:
grep ">" reference_proteome.fa > proteome_names.txt
sed 's/.p/\t/' proteome_names.txt > proteome_names_format.txt
awk '{print $1}'  proteome_names_format.txt > contigs_to_extract.txt
sed 's/^.//g' contigs_to_extract.txt > contigs_list.txt

cat contigs_list.txt | /home/vwk8/miniconda3/envs/RNAseq/bin/cdbfasta-master/cdbyank Trinity.fasta.cidx > final_coral_reference_transcriptome.fa

## N50 on final ##

################################
## Counts of transcripts, etc.
################################
Total trinity 'genes':  49031
Total trinity transcripts:      49031
Percent GC: 43.14
########################################
Stats based on ALL transcript contigs:
########################################
        Contig N10: 5064
        Contig N20: 3798
        Contig N30: 3052
        Contig N40: 2498
        Contig N50: 2061
        Median contig length: 730
        Average contig: 1246.90
        Total assembled bases: 61136605
#####################################################
## Stats based on ONLY LONGEST ISOFORM per 'GENE':
#####################################################
        Contig N10: 5064
        Contig N20: 3798
        Contig N30: 3052
        Contig N40: 2498
        Contig N50: 2061
        Median contig length: 730
        Average contig: 1246.90
        Total assembled bases: 61136605

# and now run metazoan BUSCO on final
	C:89.1%[S:88.3%,D:0.8%],F:4.0%,M:6.9%,n:954	   
	850	Complete BUSCOs (C)			   
	842	Complete and single-copy BUSCOs (S)	   
	8	Complete and duplicated BUSCOs (D)	   
	38	Fragmented BUSCOs (F)			   
	66	Missing BUSCOs (M)			   
	954	Total BUSCO groups searched


## Annotated this version so I can compare this to final protein blast version ###
# file is notblasted_annotated_coral_reference_transcriptome.txt

########### now start additional contamination removal step via protein blast with 17 Symbiodiniaceae proteome files #############3

# using same prot database as made above w 17 proteomes

vi contam_prot_blast.sh
#!/bin/bash
#SBATCH --job-name=blast_mcav
#SBATCH -N 1
#SBATCH -t 13-24:00
#SBATCH --partition=himem
#SBATCH --mem=500G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o prot_remov_%j.out
#SBATCH -e prot_remov_%j.err

blastx -query final_coral_reference_transcriptome.fa -db ~/proteomes/SymbProts_db -outfmt "6 qseqid evalue pident length" -max_target_seqs 5 -out symbiont_hits.txt

# Modified from Astrangia pub, now we compare against the symbiont reference proteome and pull out seqs with >80% identity and >100bp length match
awk '{if ($3 > 80) print $1,$2,$4 }' symbiont_hits.txt > symbiont_contigs_80.txt
awk '{if ($3 > 100) print $1}' symbiont_contigs_80.txt > final_symbiont_contigs.txt
awk '!a[$0]++' final_symbiont_contigs.txt > final_symbiont_contigs_nodup.txt

#Then pull the reads using BBmap
filterbyname.sh in=final_coral_reference_transcriptome.fa out=final_blasted_mcav_transcriptome.fa names=final_symbiont_contigs_nodup.txt

#now check quality, completeness
/home/vwk8/miniconda3/envs/RNAseq/opt/trinity-2.9.1/util/TrinityStats.pl final_blasted_mcav_transcriptome.fa

################################
## Counts of transcripts, etc.
################################
Total trinity 'genes':  47587
Total trinity transcripts:      47587
Percent GC: 42.99
########################################
Stats based on ALL transcript contigs:
########################################
        Contig N10: 5095
        Contig N20: 3826
        Contig N30: 3078
        Contig N40: 2525
        Contig N50: 2088
        Median contig length: 748
        Average contig: 1265.87
        Total assembled bases: 60238944
#####################################################
## Stats based on ONLY LONGEST ISOFORM per 'GENE':
#####################################################
        Contig N10: 5095
        Contig N20: 3826
        Contig N30: 3078
        Contig N40: 2525
        Contig N50: 2088
        Median contig length: 748
        Average contig: 1265.87
        Total assembled bases: 60238944

***** Results: *****
	C:89.0%[S:88.2%,D:0.8%],F:4.0%,M:7.0%,n:954	   
	849	Complete BUSCOs (C)			   
	841	Complete and single-copy BUSCOs (S)	   
	8	Complete and duplicated BUSCOs (D)	   
	38	Fragmented BUSCOs (F)			   
	67	Missing BUSCOs (M)			   
	954	Total BUSCO groups searched	


#get output file of all the transcripts in the final filtered and assembled transcriptome, will use this in R
fgrep ">" final_blasted_mcav_transcriptome.fa > MCAV_transcripts.txt
#open with excel, ctrl+f and replace to remove the carrots it pulls out, and separate out the columns
#renamed to MCAV_t_g to just have gene and transcript (it's just the initial name from each row copied for gene & transcript)

#~~~~STEP 5~~~~~
#annotate this final transcriptome now

vi prot_blast_annot.sh
i
#!/bin/bash
#SBATCH --job-name=annotate_mcav
#SBATCH -N 1
#SBATCH -t 4-24:00
#SBATCH --partition=himem
#SBATCH --mem=250G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o protblast_%j.out
#SBATCH -e protblast_%j.err

/home/vwk8/miniconda3/envs/RNAseq/bin/ncbi-blast-2.15.0+/bin/blastx -query final_blasted_mcav_transcriptome.fa -db /home/vwk8/miniconda3/envs/RNAseq/bin/ncbi-blast-2.15.0+/bin/uniprot_db -outfmt "6 sseqid qseqid evalue" -max_target_seqs 1 -out annotated_coral_reference_transcriptome.txt

#################Start aligning reads to reference transcriptomes###############
# BBSplit: Sort coral and Symbiodiniaceae reads
#Our eukaryotic reads contain sequences that originate from both the coral host species as well as their intracellular Symbiodiniaceae. There are four predominant Symbiodiniaceae genera that form symbioses with the corals in our study, so we will use [BBMap](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbmap-guide/) to map reads to the coral host transcriptome, as well as Symbiodinium, Breviolum, Cladocopium, and Durusdinium transcriptomes, prior to read quantification. BBMap #is splice-aware global aligner for DNA and RNA sequencing reads, and BBsplit uses BBMap to map reads to multiple transcriptomes at once and determines which transcriptome each reads matches to best.

## want to use one representative transcriptome for each genera of Symbiodiniaceae, and prefer using ones assembled from pure culture (as opposed to from in hospite/from coral tissue):
Clade A: Smic Aranda et al. 2016 (both options from pure culture, this one assoc. with Cnidarians more)
Clade B: Bminutum, Parkinson 2016 (most known to associate with warm water corals of the 4 available from this pub)
Clade C: Clado_spp_Y103, Shoguchi et al. 2018 (from clam but from culture, C goreaui is from SSID and not great quality)
Clade D: D trenchii, Bellantuono 2019 (only option)

vi bbsplit.sh
i
#!/bin/bash
#SBATCH --job-name=bbs_mcavDRTO
#SBATCH -N 1
#SBATCH -t 4-24:00
#SBATCH --partition=himem
#SBATCH --mem=250G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o bbsplit_%j.out
#SBATCH -e bbsplit_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/
DIR=/home/vwk8/transcriptomes
for FILE in *_R1_cln.fastq; do
        echo ${FILE}
        SAMP=$(basename -s _R1_cln.fastq $FILE)
        echo $SAMP

/home/vwk8/miniconda3/envs/RNAseq/bin/bbsplit.sh in1=${SAMP}_R1_cln.fastq in2=${SAMP}_R2_cln.fastq ref=${DIR}/DRTO_denovo/final_blasted_mcav_transcriptome.fa,${DIR}/symbiont/Dtrenchii_Bellantuono2019/Dtrenchii_rnaseq_assembly_v1.0.fasta,${DIR}/symbiont/Clado_spp_Y103_Shoguchi2018.fasta,${DIR}/symbiont/Bminutum_Parkinson2016/min_assembly_longest_250.fa,${DIR}/symbiont/Smic_Aranda2016/Smic.transcriptomeRef.cov5.fa basename=${SAMP}_%.fasta refstats=${SAMP}_stats.txt outu1=${SAMP}_bboutu_R1.fasta outu2=${SAMP}_bboutu_R2.fasta
done

#This will create one output for each file. The text file for ref stats can be downloaded and placed into BBSplit Statistics output file for all species. It will be used at bottom for Summary of Genus Averages.

## for some reason this was taking wayyy longer on the himem node? Stopped after 4 days and re-running on shared node with 100G memory

#From here, each file will need to be reformatted with BBMap program to split back into two separate fastq files for forward and reverse reads
#first doing this for mcav files, will do symbiont ones later when running analysis on them

# move coral aligned files to new directory within titled "salmon"

vi bbmap.sh
i
#!/bin/bash
#SBATCH --job-name=bbmap_mcav
#SBATCH -N 1
#SBATCH -t 2-24:00
#SBATCH --partition=shared
#SBATCH --mem=50G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o bbmap_cnat_%j.out
#SBATCH -e bbmap_cnat_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/
for FILE in *_transcriptome.fasta; do
        echo ${FILE}
        SAMP=$(basename -s .fasta $FILE)
        echo $SAMP
/home/vwk8/miniconda3/envs/RNAseq/bin/bbmap/reformat.sh in=${SAMP}.fasta out1=${SAMP}_1.fq out2=${SAMP}_2.fq
done

###### Salmon: Read Quantification ###################
#Salmon (https://salmon.readthedocs.io/en/latest/salmon.html#) is a tool built for transcript quantification. It uses two phases; indexing and quantification, to map samples. The first step, indexing, is independent of the reads and requires a reference transcript to build an index. Code for that is as follows:

## Index Building for Host Transcriptomes
#For the host indexes, we can keep kmer values at a standard as we are confident in the transcriptomes we have just built and the quality of the transcriptome.
# mcav index
#ran very quickly
/home/vwk8/miniconda3/envs/RNAseq/bin/salmon index -t /home/vwk8/transcriptomes/DRTO_denovo/final_blasted_mcav_transcriptome.fa -i MCAV_transcriptome_index.fa

## Mapping Reads: Use Salmon for quasi-mapping results
#eventually do for dominant symbiont as well
[Salmon](https://salmon.readthedocs.io/en/latest/salmon.html#) is a tool built for transcript quantification. It uses two phases; indexing and quantification, to map samples. The second phase: quantification, using quasi-mapping program to map samples to index. Quasi-mapping assumes a generally small file and increased number of repeats in reference sequences. It also takes into account splicing because a transcriptome is assumed to be used for the index.

#  move host-aligned filtered files into you salmon directory
#  since we'll be running the same command on each sample, the simplest way to automate this process is with a simple shell script
#  the script loops through each sample and invokes salmon using fairly barebone options
# -i  tells salmon where to find the index
# -l A tells salmon that it should automatically determine the library type of the sequencing reads (stranded vs. unstranded etc.)
# -1 and -2 tell salmon where to find the left and right reads for this sample (notice, salmon will accept gzipped FASTQ files directly)
# -p 8 tells salmon to make use of 8 threads
# -o specifies the directory where salmon's quantification results should be written

# Loop for Mcav
vi salmon_loop.sh

#!/bin/bash
#SBATCH --job-name=salmon_mcav
#SBATCH -N 1
#SBATCH -t 4-24:00
#SBATCH --partition=himem
#SBATCH --mem=500G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o salmon_cnat_reads_%j.out
#SBATCH -e salmon_cnat_reads_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/salmon
for FILE in *_1.fq; do
        echo ${FILE}
        SAMP=$(basename -s _1.fq $FILE)
        echo $SAMP
        DIR=/home/vwk8/transcriptomes/DRTO_denovo

/home/vwk8/miniconda3/envs/RNAseq/bin/salmon quant -i ${DIR}/MCAV_transcriptome_index.fa -l A \
				-1 ${SAMP}_1.fq \
				-2 ${SAMP}_2.fq \
				-p 8 --validateMappings -o quants/${SAMP}_quant
done


#% alignment?
grep "Mapping rate" salmon_cnat_reads_471966.err

[2024-11-12 13:35:30.285] [jointLog] [info] Mapping rate = 77.7997%
[2024-11-12 13:36:45.358] [jointLog] [info] Mapping rate = 81.7772%
[2024-11-12 13:38:31.003] [jointLog] [info] Mapping rate = 84.5534%
[2024-11-12 13:40:25.964] [jointLog] [info] Mapping rate = 81.5162%
[2024-11-12 13:42:44.445] [jointLog] [info] Mapping rate = 40.7044%
[2024-11-12 13:44:34.502] [jointLog] [info] Mapping rate = 46.8157%
[2024-11-12 13:46:16.178] [jointLog] [info] Mapping rate = 79.6775%
[2024-11-12 13:48:04.061] [jointLog] [info] Mapping rate = 80.104%
[2024-11-12 13:49:00.739] [jointLog] [info] Mapping rate = 61.7471%
[2024-11-12 13:50:52.588] [jointLog] [info] Mapping rate = 84.3118%
[2024-11-12 13:52:35.213] [jointLog] [info] Mapping rate = 82.7805%
[2024-11-12 13:54:26.554] [jointLog] [info] Mapping rate = 80.1503%
[2024-11-12 13:56:06.302] [jointLog] [info] Mapping rate = 72.334%
[2024-11-12 13:58:03.936] [jointLog] [info] Mapping rate = 83.7004%
[2024-11-12 13:58:49.924] [jointLog] [info] Mapping rate = 82.4611%
[2024-11-12 14:00:55.031] [jointLog] [info] Mapping rate = 83.3162%
[2024-11-12 14:02:29.943] [jointLog] [info] Mapping rate = 84.3882%
[2024-11-12 14:04:25.975] [jointLog] [info] Mapping rate = 83.6021%
[2024-11-12 14:06:13.670] [jointLog] [info] Mapping rate = 82.0354%
[2024-11-12 14:07:30.964] [jointLog] [info] Mapping rate = 80.5672%
[2024-11-12 14:09:19.754] [jointLog] [info] Mapping rate = 85.4246%
[2024-11-12 14:11:26.419] [jointLog] [info] Mapping rate = 82.7586%
[2024-11-12 14:13:00.563] [jointLog] [info] Mapping rate = 81.9183%
[2024-11-12 14:15:19.344] [jointLog] [info] Mapping rate = 83.9542%
[2024-11-12 14:16:48.019] [jointLog] [info] Mapping rate = 81.7012%
[2024-11-12 14:18:31.585] [jointLog] [info] Mapping rate = 84.8267%
[2024-11-12 14:20:25.980] [jointLog] [info] Mapping rate = 84.0301%
[2024-11-12 14:22:55.191] [jointLog] [info] Mapping rate = 83.9696%
[2024-11-12 14:24:40.540] [jointLog] [info] Mapping rate = 84.8221%
[2024-11-12 14:27:03.004] [jointLog] [info] Mapping rate = 83.6113%
[2024-11-12 14:28:53.781] [jointLog] [info] Mapping rate = 83.2662%

## now running bbmap & salmon on symbiont files
# only running on reads from dominant symbiont type for each sample
# all but 2 are Clade C, one is B, one is D

vi bbmap.sh
i
#!/bin/bash
#SBATCH --job-name=bbm_symC
#SBATCH -N 1
#SBATCH -t 2-24:00
#SBATCH --partition=shared
#SBATCH --mem=50G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o bbmap_%j.out
#SBATCH -e bbmap_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/
for FILE in *.fasta; do
        echo ${FILE}
        SAMP=$(basename -s .fasta $FILE)
        echo $SAMP
/home/vwk8/miniconda3/envs/RNAseq/bin/bbmap/reformat.sh in=${SAMP}.fasta out1=${SAMP}_1.fq out2=${SAMP}_2.fq
done


##  now salmon for each clade

# Loop for symB
vi salmon.sh

#!/bin/bash
#SBATCH --job-name=salm_mcB
#SBATCH -N 1
#SBATCH -t 4-24:00
#SBATCH --partition=himem
#SBATCH --mem=500G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o salmon_%j.out
#SBATCH -e salmon_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/salmon
for FILE in *_1.fq; do
        echo ${FILE}
        SAMP=$(basename -s _1.fq $FILE)
        echo $SAMP
        DIR=/home/vwk8/transcriptomes/symbiont

/home/vwk8/miniconda3/bin/salmon quant -i ${DIR}/Bminutum_Parkinson2016/B_min_index -l A \
				-1 ${SAMP}_1.fq \
				-2 ${SAMP}_2.fq \
				-p 8 --validateMappings -o quants/${SAMP}_quant
done

# % alignment

grep "Mapping rate" salmon_err
[2024-12-03 12:05:04.295] [jointLog] [info] Mapping rate = 67.339%

# Loop for symC
vi salmon.sh

#!/bin/bash
#SBATCH --job-name=salm_mcC
#SBATCH -N 1
#SBATCH -t 4-24:00
#SBATCH --partition=himem
#SBATCH --mem=500G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o salmon_%j.out
#SBATCH -e salmon_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/salmon
for FILE in *_1.fq; do
        echo ${FILE}
        SAMP=$(basename -s _1.fq $FILE)
        echo $SAMP
        DIR=/home/vwk8/transcriptomes/symbiont

/home/vwk8/miniconda3/bin/salmon quant -i ${DIR}/C_sppY103_index -l A \
				-1 ${SAMP}_1.fq \
				-2 ${SAMP}_2.fq \
				-p 8 --validateMappings -o quants/${SAMP}_quant
done

# % alignment

grep "Mapping rate" salmon_481949.err
[2024-12-03 12:05:46.400] [jointLog] [info] Mapping rate = 62.8515%
[2024-12-03 12:06:50.745] [jointLog] [info] Mapping rate = 63.3658%
[2024-12-03 12:07:30.543] [jointLog] [info] Mapping rate = 65.9717%
[2024-12-03 12:08:01.891] [jointLog] [info] Mapping rate = 64.3465%
[2024-12-03 12:08:09.690] [jointLog] [info] Mapping rate = 53.8407%
[2024-12-03 12:08:35.010] [jointLog] [info] Mapping rate = 66.0795%
[2024-12-03 12:08:57.255] [jointLog] [info] Mapping rate = 64.1935%
[2024-12-03 12:09:24.729] [jointLog] [info] Mapping rate = 63.5486%
[2024-12-03 12:10:33.983] [jointLog] [info] Mapping rate = 64.9966%
[2024-12-03 12:11:44.017] [jointLog] [info] Mapping rate = 66.1517%
[2024-12-03 12:12:19.249] [jointLog] [info] Mapping rate = 59.3984%
[2024-12-03 12:12:38.021] [jointLog] [info] Mapping rate = 62.7354%
[2024-12-03 12:13:09.458] [jointLog] [info] Mapping rate = 62.0595%
[2024-12-03 12:13:42.978] [jointLog] [info] Mapping rate = 63.301%
[2024-12-03 12:14:15.229] [jointLog] [info] Mapping rate = 64.725%
[2024-12-03 12:14:27.446] [jointLog] [info] Mapping rate = 62.2201%
[2024-12-03 12:14:53.495] [jointLog] [info] Mapping rate = 63.4081%
[2024-12-03 12:15:04.583] [jointLog] [info] Mapping rate = 62.1459%
[2024-12-03 12:15:37.002] [jointLog] [info] Mapping rate = 65.5798%
[2024-12-03 12:15:47.615] [jointLog] [info] Mapping rate = 59.8287%
[2024-12-03 12:16:06.723] [jointLog] [info] Mapping rate = 63.2978%
[2024-12-03 12:16:26.460] [jointLog] [info] Mapping rate = 60.7222%
[2024-12-03 12:17:14.744] [jointLog] [info] Mapping rate = 66.1199%
[2024-12-03 12:17:48.857] [jointLog] [info] Mapping rate = 64.9716%
[2024-12-03 12:18:02.434] [jointLog] [info] Mapping rate = 61.2602%
[2024-12-03 12:18:24.812] [jointLog] [info] Mapping rate = 62.8348%
[2024-12-03 12:18:52.695] [jointLog] [info] Mapping rate = 65.8227%
[2024-12-03 12:19:08.572] [jointLog] [info] Mapping rate = 60.3777%
[2024-12-03 12:19:25.057] [jointLog] [info] Mapping rate = 63.0842%


# clade D

vi salmon.sh

#!/bin/bash
#SBATCH --job-name=salm_mcD
#SBATCH -N 1
#SBATCH -t 4-24:00
#SBATCH --partition=himem
#SBATCH --mem=500G
#SBATCH --mail-type=end
#SBATCH --mail-type=fail
#SBATCH --mail-user=vwk8@txstate.edu
#SBATCH -o salmon_%j.out
#SBATCH -e salmon_%j.err
PATH=$PATH:/home/vwk8/miniconda3/envs/RNAseq/bin/salmon
for FILE in *_1.fq; do
        echo ${FILE}
        SAMP=$(basename -s _1.fq $FILE)
        echo $SAMP
        DIR=/home/vwk8/transcriptomes/symbiont

/home/vwk8/miniconda3/bin/salmon quant -i ${DIR}/Dtrenchii_Bellantuono2019/D_trenchii_index -l A \
				-1 ${SAMP}_1.fq \
				-2 ${SAMP}_2.fq \
				-p 8 --validateMappings -o quants/${SAMP}_quant
done

# % alignment

grep "Mapping rate" salmon_481951.err
[2024-12-03 12:08:20.596] [jointLog] [info] Mapping rate = 61.2944%